pipeline {
    stage('Build') {
        // The first milestone step starts tracking concurrent build order
        milestone()
        node {
            echo "Building"
            //apply the dockerfile and push the image, nothing else needed
        }
    }

    // This locked resource contains both Test stages as a single concurrency Unit.
    // Only 1 concurrent build is allowed to utilize the test resources at a time.
    // Newer builds are pulled off the queue first. When a build reaches the
    // milestone at the end of the lock, all jobs started prior to the current
    // build that are still waiting for the lock will be aborted
    lock(resource: 'myResource', inversePrecedence: true){
        node('test') {
            stage('Unit Tests') {
                //White box tests
                echo "Unit Tests"
            }
            stage('System Tests') {
                //Black box tests (Supongo que sera aplicar npm test sobre ambos y crear el test para el frontend)
                echo "System Tests"
                
            }
        }
        milestone()
    }

    // The Deploy stage does not limit concurrency but requires manual input
    // from a user. Several builds might reach this step waiting for input.
    // When a user promotes a specific build all preceding builds are aborted,
    // ensuring that the latest code is always deployed.
    stage('Deploy') {
        input "Deploy?"
        milestone()
        node {
            echo "Deploying"
            //Pull the images in the EC2 Instances and make them run
        }
    }
}
